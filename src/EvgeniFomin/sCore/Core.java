package EvgeniFomin.sCore;import EvgeniFomin.sCore.dataBase.SQL;import EvgeniFomin.sCore.manager.RPlayerManager;import EvgeniFomin.sCore.netty.channels.Servers;import EvgeniFomin.sCore.other.Messages;import EvgeniFomin.sCore.utils.configManager.ConfigManager;import EvgeniFomin.sCore.other.Error;import EvgeniFomin.sCore.utils.logger.Logger;import io.netty.channel.Channel;import java.sql.SQLException;import java.sql.Statement;import static EvgeniFomin.sCore.utils.Padezh.padezh;public class Core {    public static int принятых;    public static SQL sql;    public static int исходящих;    private static long startTime = System.currentTimeMillis();    private static Channel channel;    private static Core instance;    private RPlayerManager rPlayerManager;    public static Core getInstance() {        if (instance == null) {            instance = new Core();        }        return instance;    }    public static SQL getSql() {        return sql;    }    public static void setSql(SQL sql) {        Core.sql = sql;    }    public RPlayerManager getrPlayerManager() {        return rPlayerManager;    }    public void initSQL() {        try {            sql = new SQL("localhost", 3306, "root", "root", "sCore");//            sql = new SQL("193.70.80.125", 3306, "Core", "jnMKyqxkMERawntb", "Core");            sql.openConnection();            if (sql.isConnected()) {                Logger.getLogger().message(Messages.MYSQL_CONNECTED);            } else {                Logger.getLogger().message(Messages.MYSQL_IS_NOT_CONNECTED);            }            Statement statement = sql.getConnection().createStatement();            statement.executeUpdate("CREATE TABLE IF NOT EXISTS Stats(user varchar(255) NOT NULL UNIQUE, band int, coins int, level int, xp int);");            statement.executeUpdate("CREATE TABLE IF NOT EXISTS Bans(user varchar(255) NOT NULL UNIQUE, bannedBy varchar(16), banReason varchar(255), banEnd long, banOn long, bans int, active varchar(5));");            statement.executeUpdate("CREATE TABLE IF NOT EXISTS Mutes(user varchar(255) NOT NULL UNIQUE, mutedBy varchar(16), muteReason varchar(255), muteEnd long, muteOn long, mutts int, active varchar(5));");            this.rPlayerManager = new RPlayerManager();        } catch (SQLException e) {            Logger.getLogger().message(Error.ERROR_1);        }    }    public int getOutgoing() {        return исходящих;    }    public int getAdopted() {        return принятых;    }    public String getServers() {        return Servers.getServersManager().getServers().keySet().toString();    }    public String getProxies() {        return Servers.getServersManager().getProxy().keySet().toString();    }    public Integer getOnline() {        return 0;    }    public void stop() {        try {            Logger.getLogger().message(Messages.STOP_SYSTEM);            Logger.getLogger().message(Messages.UNLOAD_CACHE);            Thread.sleep(3000);        } catch (InterruptedException e) {            Logger.getLogger().message(Error.ERROR_5);        }        Logger.getLogger().message(Messages.SENDING_DISCONNECT_PACKET);        Logger.getLogger().message(Messages.STOP_NETTY_SERVER);        if (Core.getSql().isConnected()) {            Logger.getLogger().message(Messages.DISCONNECT_MYSQL);            Core.getSql().closeConnection();        }        long end = (System.currentTimeMillis() / 1000);        Logger.getLogger().message(Messages.WORK_TIME_MESSAGE.replace("%time%", remainingTime()));        Logger.getLogger().message(Messages.THANKS_FOR_WORK);        System.exit(0);    }    public void initNettyServer() {        Server server = new Server(ConfigManager.config().c().getInt("sCore.port"));        Logger.getLogger().message(Messages.RUN_NETTY_SERVER);        server.run();        channel = server.getChannel();    }    public Channel getChannel() {        return channel;    }    private String remainingTime() {        long seconds = (System.currentTimeMillis() - startTime) / 1000L;        long minutes = 0L;        while (seconds >= 60L) {            ++minutes;            seconds -= 60L;        }        long hours = 0L;        while (minutes >= 60L) {            ++hours;            minutes -= 60L;        }        long days = 0L;        while (hours >= 24L) {            ++days;            hours -= 24L;        }        String sDay = padezh("Д", "ень", "ня", "ней", (int) days);        String sHours = padezh("час", "", "а", "ов", (int) hours);        String sMinutes = padezh("минут", "а", "ы", "", (int) minutes);        String sSeconds = padezh("секун", "да", "ды", "д", (int) seconds);        return "" + days + " " + sDay + ", " + hours + " " + sHours + ", " + minutes + " " + sMinutes + " и " + seconds + " " + sSeconds + "".replace("{days}", days + "").replace("{hours}", hours + "").replace("{minutes}", minutes + "").replace("{secs}", seconds + "");    }}